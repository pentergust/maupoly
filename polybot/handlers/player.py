"""–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–≥—Ä–æ–≤—ã–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏.

–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ.
"""

from aiogram import Bot, F, Router
from aiogram.filters import (
    IS_MEMBER,
    IS_NOT_MEMBER,
    ChatMemberUpdatedFilter,
    Command,
)
from aiogram.types import CallbackQuery, ChatMemberUpdated, Message
from loguru import logger

from polybot import keyboards, messages
from polybot.messages import (
    NO_ROOM_MESSAGE,
    NOT_ENOUGH_PLAYERS,
    get_closed_room_message,
    get_room_status,
)
from maupoly.exceptions import (
    AlreadyJoinedError,
    DeckEmptyError,
    LobbyClosedError,
    NoGameInChatError,
)
from maupoly.game import MonoGame
from maupoly.session import SessionManager

router = Router(name="Player")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========

@router.message(Command("join"))
async def join_player(message: Message,
    sm: SessionManager,
    game: MonoGame | None,
    bot: Bot
):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∏–≥—Ä–µ."""
    try:
        sm.join(message.chat.id, message.from_user)
    except NoGameInChatError:
        await message.answer(NO_ROOM_MESSAGE)
    except LobbyClosedError:
        await message.answer(get_closed_room_message(game))
    except AlreadyJoinedError:
        await message.answer("üç∞ –í—ã —É–∂–µ —Å –Ω–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ.")
    except DeckEmptyError:
        await message.answer("üëÄ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —É –Ω–∞—Å –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–ª—è –≤–∞—Å –∫–∞—Ä—Ç.")
    else:
        try:
            await message.delete()
        except Exception as e:
            logger.warning("Unable to delete message: {}", e)
            await message.answer(
                "üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
            )

    if game is not None:
        if not game.started:
            await bot.edit_message_text(
                text=get_room_status(game),
                chat_id=game.chat_id,
                message_id=game.lobby_message,
                reply_markup=keyboards.get_room_markup(game)
            )
        else:
            game.journal.add(
                "üç∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, "
                f"{message.from_user.mention_html()}!"
            )
            await game.journal.send_journal()

@router.message(Command("leave"))
async def leave_player(message: Message,
    sm: SessionManager,
    game: MonoGame | None
):
    """–í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏–≥—Ä—ã."""
    if game is None:
        return await message.answer(NO_ROOM_MESSAGE)

    try:
        game.remove_player(message.from_user.id)
        sm.user_to_chat.pop(message.from_user.id)
    except NoGameInChatError:
        return await message.answer("üëÄ –í–∞—Å –Ω–µ—Ç –≤ –∫–æ–º–Ω–∞—Ç–µ —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ—ë.")

    if game.started:
        game.journal.add(text=(
            "üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥ –∑–∞ "
            f"{game.player.user.mention_html()}."
        ))
        game.journal.set_markup(keyboards.TURN_MARKUP)
        await game.journal.send_journal()
    else:
        status_message = (
            f"{NOT_ENOUGH_PLAYERS}\n\n{messages.end_game_message(game)}"
        )
        sm.remove(message.chat.id)
        await message.answer(status_message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
# ======================

@router.callback_query(F.data=="join")
async def join_callback(query: CallbackQuery,
    sm: SessionManager,
    game: MonoGame |  None
):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–∫–∞ –≤ —Ç–µ–∫—É—â—É—é –∫–æ–º–Ω–∞—Ç—É."""
    try:
        sm.join(query.message.chat.id, query.from_user)
    except LobbyClosedError:
        await query.message.answer(get_closed_room_message(game))
    except AlreadyJoinedError:
        await query.message.answer("üç∞ –í—ã —É–∂–µ –∏ –±–µ–∑ —Ç–æ–≥–æ —Å –Ω–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ.")
    else:
        await query.message.edit_text(
            text=get_room_status(game),
            reply_markup=keyboards.get_room_markup(game)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
# ===================

@router.chat_member(ChatMemberUpdatedFilter(IS_MEMBER >> IS_NOT_MEMBER))
async def on_user_leave(event: ChatMemberUpdated,
    game: MonoGame | None,
    sm: SessionManager
):
    """–ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Ç–æ—Ç –æ—Å–º–µ–ª–∏–ª—Å—è –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞."""
    if game is None:
        return

    try:
        game.remove_player(event.from_user.id)
        sm.user_to_chat.pop(event.from_user.id)
    except NoGameInChatError:
        pass

    if game.started:
        game.journal.add(
           f"–õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥ –∑–∞ {game.player.user.mention_html()}."
        )
        game.journal.set_markup(keyboards.TURN_MARKUP)
        await game.journal.send_journal()
    else:
        status_message = NOT_ENOUGH_PLAYERS
        sm.remove(event.chat.id)
        await event.answer(status_message)
