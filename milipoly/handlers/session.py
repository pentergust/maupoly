"""–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–≥—Ä–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏.

–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—ã, —É–¥–∞–ª—è—Ç—å –∏—Ö, –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
–ï—Å–ª–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–µ—Å—Å–∏—è–º–∏, —Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ
–≤ —Ä–æ—É—Ç–µ—Ä `player`.
"""



from aiogram import Bot, F, Router
from aiogram.filters import Command

# from aiogram.filters.callback_data import CallbackData
from aiogram.types import CallbackQuery, Message
from loguru import logger

from milipoly import keyboards, messages
from milipoly.config import config
from milipoly.milipoly.exceptions import NoGameInChatError
from milipoly.milipoly.game import MonoGame
from milipoly.milipoly.session import SessionManager

router = Router(name="Sessions")

ROOM_SETTINGS = (
    "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã</b>:\n\n"
    "–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–≥—Ä—ã.\n"
    "–û–Ω–∏ –ø—Ä–∏–≤–Ω–æ—Å—è—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –≤ –∏–≥—Ä–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞.\n\n"
    "–ü—É–Ω–∫—Ç—ã –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ üåü <b>–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã</b> –∏ —É–∂–µ –Ω–∞–≤–æ–¥—è—Ç —Å—É–µ—Ç—É."
)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
# ===========

@router.message(Command("game"))
async def create_game(message: Message,
    sm: SessionManager,
    game: MonoGame | None,
    bot: Bot
):
    """–°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É."""
    if message.chat.type == "private":
        return await message.answer("üëÄ –ò–≥—Ä—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.")

    # –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–ª—É—á–∞–µ–º –µ—ë
    if game is None or game.started:
        game = sm.create(message.chat.id)
        game.start_player = message.from_user

    lobby_message = await message.answer(
        messages.get_room_status(game),
        reply_markup=keyboards.get_room_markup(game)
    )
    # –î–æ–±–∞–≤–ª—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–±–±–∏, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ
    game.lobby_message = lobby_message.message_id

@router.message(Command("start"))
async def start_gama(message: Message, game: MonoGame | None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    if message.chat.type == "private":
        return await message.answer(messages.HELP_MESSAGE)

    if game is None:
        await message.answer(messages.NO_ROOM_MESSAGE)

    elif game.started:
        await message.answer("üå≥ –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å —Ä–∞–Ω–µ–µ.")

    elif len(game.players) < config.min_players:
        await message.answer9(messages.NOT_ENOUGH_PLAYERS)

    else:
        try:
            await message.delete()
        except Exception as e:
            logger.warning("Unable to delete message: {}", e)
            await message.answer(
                "üßπ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
            )

        game.new_game()
        game.journal.add(messages.get_new_game_message(game))
        game.journal.set_markup(keyboards.TURN_MARKUP)
        await game.journal.send_journal()

@router.message(Command("stop"))
async def stop_gama(message: Message, game: MonoGame | None, sm: SessionManager):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É."""
    if game is None:
        return await message.answer(messages.NO_ROOM_MESSAGE)

    player = game.get_player(message.from_user.id)
    if player is None or not player.is_owner:
        return await message.answer(
            "üçì –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É."
        )

    sm.remove(game.chat_id)
    await message.answer((
        "üßπ –ò–≥—Ä–∞ –±—ã–ª–∞ –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω–æ-–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
        f"{messages.end_game_message(game)}"
    ))


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç—ã
# ==============================

@router.message(Command("open"))
async def open_gama(message: Message, game: MonoGame | None, sm: SessionManager):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    if game is None:
        return await message.answer(messages.NO_ROOM_MESSAGE)

    player = game.get_player(message.from_user.id)
    if player is None or not player.is_owner:
        return await message.answer(
            "üëÄ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É."
        )

    game.open = True
    await message.answer(
        "üç∞ –ö–æ–º–Ω–∞—Ç–∞ <b>–æ—Ç–∫—Ä—ã—Ç–∞</b>!\n –ª—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∑–∞–π—Ç–∏ (/join)."
    )

@router.message(Command("close"))
async def close_gama(message: Message,
    game: MonoGame | None,
    sm: SessionManager
):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∏–≥—Ä–æ–≤—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞."""
    if game is None:
        return await message.answer(messages.NO_ROOM_MESSAGE)

    player = game.get_player(message.from_user.id)
    if player is None or not player.is_owner:
        return await message.answer(
            "üëÄ –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É."
        )

    game.open = False
    await message.answer(
        "üîí –ö–æ–º–Ω–∞—Ç–∞ <b>–∑–∞–∫—Ä—ã—Ç–∞</b>.\n–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç –≤–∞–º –¥–æ–∏–≥—Ä–∞—Ç—å."
    )


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–Ω–∞—Ç–∞–º–∏
# ================================

@router.message(Command("kick"))
async def kick_player(message: Message,
    game: MonoGame | None,
    sm: SessionManager
):
    """–í—ã–∫–∏–¥—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã."""
    if game is None:
        return await message.answer(messages.NO_ROOM_MESSAGE)

    if not game.started:
        return await message.answer(
            "üç∞ –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–∫–∞ —Ä–∞–Ω–æ –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )

    player = game.get_player(message.from_user.id)
    if player is None or not  player.is_owner:
        return await message.answer(
            "üçì –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –≤—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞."
        )

    if message.reply_to_message is None:
        return await message.answer(
            "üç∑ –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–≥–æ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å."
        )

    kicked_user = message.reply_to_message.from_user
    try:
        game.remove_player(kicked_user.id)
    except NoGameInChatError:
        return message.answer(
            "üçì –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–∂–µ –Ω–µ –∏–≥—Ä–∞–µ—Ç —Å –Ω–∞–º–∏."
        )

    game.journal.add((
        f"üßπ {game.start_player.mention_html()} –≤—ã–≥–Ω–∞–ª "
        f"{kicked_user.mention_html()} –∏–∑ –∏–≥—Ä—ã –∑–∞ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.\n"
    ))
    if game.started:
        game.journal.add((
            "üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥ –∑–∞ "
            f"{game.player.user.mention_html()}."
        ))
        game.journal.set_markup(keyboards.TURN_MARKUP)
        await game.journal.send_journal()
    else:
        await message.answer((
            f"{messages.NOT_ENOUGH_PLAYERS}\n\n"
            f"{messages.end_game_message(game)}"
        ))
        sm.remove(message.chat.id)

@router.message(Command("skip"))
async def skip_player(message: Message,
    game: MonoGame | None,
    sm: SessionManager
):
    """–ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–∞ –¥–æ–ª–≥–æ–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ."""
    if game is None:
        return await message.answer(message.NO_ROOM_MESSAGE)

    if not game.started:
        return await message.answer(
            "üå≥ –ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–∫–∞ —Ä–∞–Ω–æ –≤—ã–∫–∏–¥—ã–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
        )

    player = game.get_player(message.from_user.id)
    if player is None or not player.is_owner:
        return await message.answer(
            "üçì –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –∫–æ–º–Ω–∞—Ç—ã –º–æ–∂–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä–æ–∫–∞."
        )

    skip_player = game.player
    game.next_turn()
    game.journal.add((
        f"‚òï {skip_player.user.mention_html()} –ø–æ—Ç–µ—Ä—è–ª —Å–≤–æ–∏ –∫—É–±–∏–∫–∏.\n"
        "–ê –ø–æ–∫–∞ –æ–Ω(–∞) –∏—Ö –∏—â–µ—Ç, –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É.\n"
        "üç∞ –õ–∞–¥–Ω–µ–Ω—å–∫–æ, —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–æ–¥ –∑–∞ "
        f"{game.player.user.mention_html()}."
    ))
    game.journal.set_markup(keyboards.TURN_MARKUP)
    await game.journal.send_journal()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
# ===================

@router.callback_query(F.data=="start_game")
async def start_game_call(query: CallbackQuery, game: MonoGame | None):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –∫–æ–º–Ω–∞—Ç–µ."""
    try:
        await query.message.delete()
    except Exception as e:
        logger.warning("Unable to delete message: {}", e)
        await query.message.answer(
            "üëÄ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ."
        )

    game.new_game()
    game.journal.add(messages.get_new_game_message(game))
    game.journal.set_markup(keyboards.TURN_MARKUP)
    await game.journal.send_journal()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
# =================

# TODO: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –≤–æ–æ–±—â–µ –±—É–¥–µ—Ç
# @router.message(Command("settings"))
# async def settings_menu(message: Message, game: MonoGame | None):
#     """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
#     if game is None:
#         return await message.answer(messages.NO_ROOM_MESSAGE)

#     await message.answer(ROOM_SETTINGS,
#         reply_markup=keyboards.get_settings_markup(game.rules)
#     )

# @router.callback_query(F.data=="room_settings")
# async def settings_menu_call(query: CallbackQuery, game: MonoGame | None):
#     """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
#     if game is None:
#         return await query.message.answer(messages.NO_ROOM_MESSAGE)

#     await query.message.answer(ROOM_SETTINGS,
#         reply_markup=keyboards.get_settings_markup(game.rules)
#     )
#     await query.answer()

# class SettingsCallback(CallbackData, prefix="set"):
#     """–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫."""

#     key: str
#     value: bool

# @router.callback_query(SettingsCallback.filter())
# async def edit_room_settings_call(query: CallbackQuery,
#     callback_data: SettingsCallback,
#     game: MonoGame | None
# ):
#     """–ò–∑–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã."""
#     if game is None:
#         return await query.message.answer(messages.NO_ROOM_MESSAGE)

#     setattr(game.rules, callback_data.key, callback_data.value)
#     await query.message.edit_text(ROOM_SETTINGS,
#         reply_markup=keyboards.get_settings_markup(game.rules)
#     )
